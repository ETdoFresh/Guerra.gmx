<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Settings

RightHanded = true;
ObstaclesOverlap = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tools and First Selection

DRAWBARBWIRE = 1;
DRAWMINE = 2;
DRAWGUN = 3;
DRAWFLAG = 4;
DRAWFINISH = 5;
ERASER = 0;
SELECT = 0;

_currentTool = DRAWBARBWIRE;

_isDrawing = false;

_lastPointX = -1000;
_lastPointY = -1000;

_undoList = ds_list_create();
_actionList = ds_list_create();
_bulletList = ds_list_create();
_redoList = ds_list_create();

BarbwireSpacing = 48;
BulletSpacing = 48;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scrolling

ScrollTime = 1; // seconds
TargetViewX = 0;

if (RightHanded)
    TargetViewX = 250;

TargetViewY = 0;
_scrollViewToTarget = true;
_startViewX = view_xview[0];
_startViewY = view_yview[0];
_scrollAmount = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player and Message

Player = 1;

var message = instance_create(0,0, PopUpMessageObject);
message.SolidTime = 3;
message.IsCentered = true;
message.MyText = "Player 1, Draw your Map!";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll View to Target

if (_scrollViewToTarget)
{
    _scrollAmount += 1 / (ScrollTime * room_speed);
    _scrollAmount = min(1, _scrollAmount);
    view_xview[0] = lerp(_startViewX, TargetViewX, _scrollAmount);
    view_yview[0] = lerp(_startViewY, TargetViewY, _scrollAmount);
    
    if (_scrollAmount &gt;= 1)
        _scrollViewToTarget = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Barbwire

if (_isDrawing &amp;&amp; _currentTool == DRAWBARBWIRE)
{
    var dx = mouse_x - _lastPointX;
    var dy = mouse_y - _lastPointY;
    var distance = point_distance(mouse_x, mouse_y, _lastPointX, _lastPointY);
    
    var barbwire = -1;
    var prevBarbwire = -1;
    while (distance &gt;= BarbwireSpacing)
    {    
        dx = dx / distance * BarbwireSpacing + _lastPointX;
        dy = dy / distance * BarbwireSpacing + _lastPointY;
        barbwire = instance_create(dx, dy, BarbwireObject);
        barbwire.image_angle = point_direction(mouse_x, mouse_y, _lastPointX, _lastPointY);
        
        if (!ObstaclesOverlap)
        {
            var actionListSize = ds_list_size(_actionList);
            if (actionListSize &gt; 1)
            {
                var prevBarbwireX = ds_list_find_value(_actionList, actionListSize - 3);
                var prevBarbwireY = ds_list_find_value(_actionList, actionListSize - 2);
                prevBarbwire = instance_nearest(prevBarbwireX, prevBarbwireY, BarbwireObject);
                instance_deactivate_object(prevBarbwire);
            }
            
            with (barbwire)
                if (place_meeting(x, y, all))
                    instance_destroy();
    
            if (actionListSize &gt; 1)
                instance_activate_object(prevBarbwire);
                    
            if (!instance_exists(barbwire))
                break;
        }
        else
        {
            with (barbwire)
                if (place_meeting(x, y, CannotDrawObject))
                    instance_destroy();
                    
            if (!instance_exists(barbwire))
                break;
        }
                    
        _lastPointX = dx;
        _lastPointY = dy;
        
        ds_list_add(_actionList, BarbwireObject);
        ds_list_add(_actionList, barbwire.x);
        ds_list_add(_actionList, barbwire.y);
        ds_list_add(_actionList, barbwire.image_angle);
                
        dx = mouse_x - _lastPointX;
        dy = mouse_y - _lastPointY;
        distance = point_distance(mouse_x, mouse_y, _lastPointX, _lastPointY);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Mine

if (_isDrawing &amp;&amp; _currentTool == DRAWMINE)
{
    if (!ObstaclesOverlap)
    {
        with (_selected)
        {
            if (!place_meeting(mouse_x, mouse_y, all))
            {
                x = mouse_x;
                y = mouse_y;
            }
        }
    }
    else
    {
        with (_selected)
        {
            if (!place_meeting(mouse_x, mouse_y, CannotDrawObject))
            {
                x = mouse_x;
                y = mouse_y;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Gun

if (_isDrawing &amp;&amp; _currentTool == DRAWGUN)
{
    var pointDirection = point_direction(_selected.x, _selected.y, mouse_x, mouse_y);
    _selected.image_angle = pointDirection;
    
    if (90 &lt; _selected.image_angle &amp;&amp; _selected.image_angle &lt; 270)
        _selected.image_yscale = -1;
    else
        _selected.image_yscale = 1;
        
    // Iteration of making bullets
    var distance = point_distance(_selected.x, _selected.y, mouse_x, mouse_y);
    var numberOfBullets = 0;
    var bulletWidth = sprite_get_width(BulletSprite);
    var bulletWidthAndSpacing = bulletWidth + BulletSpacing;
    var gunBarrelX = _selected.x;
    var gunBarrelY = _selected.y;
    
    distance = distance - _selected.sprite_width / 2;
    if (distance &gt; 0)
    {
        numberOfBullets = ceil(distance / bulletWidthAndSpacing);
        distance = distance / numberOfBullets;
    }
                
    while (ds_list_size(_bulletList) &gt; numberOfBullets)
    {
        var bullet = ds_list_find_value(_bulletList, 0);
        with (bullet) instance_destroy();
        ds_list_delete(_bulletList, 0);
    }
    
    while (ds_list_size(_bulletList) &lt; numberOfBullets)
        ds_list_add(_bulletList, instance_create(0, 0, BulletObject));
    
    for (var i = 0; i &lt; ds_list_size(_bulletList); i++)
    {
        var bullet = ds_list_find_value(_bulletList, i);
        bullet.x = gunBarrelX + lengthdir_x(distance * (i + 1), pointDirection);
        bullet.y = gunBarrelY + lengthdir_y(distance * (i + 1), pointDirection);
        bullet.image_angle = pointDirection;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Flag

if (_isDrawing &amp;&amp; _currentTool == DRAWFLAG)
{
    with (_selected)
    {
        if (!place_meeting(mouse_x, mouse_y, CannotDrawObject))
        {
            x = mouse_x;
            y = mouse_y;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Erase

if (_isDrawing &amp;&amp; _currentTool == ERASER)
{
    var instance = collision_point(mouse_x, mouse_y, all, true, true);
    if (instance != noone)
    {
        ds_list_add(_actionList, instance.object_index);
        ds_list_add(_actionList, instance.x);
        ds_list_add(_actionList, instance.y);
        ds_list_add(_actionList, instance.image_angle);
        
        with (instance)
            instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if Mines overlap

if (_isDrawing &amp;&amp; _currentTool == DRAWMINE)
{
    with (_selected)
    {
        if (place_meeting(x, y, CannotDrawObject) || place_meeting(x, y, MineObject))
        {
            var message = instance_create(view_wview[0] / 2 + view_xview[0], view_hview[0] / 2 + view_yview[0], PopUpMessageObject);
            message.MyText = "Cannot place mine on top of another object";
            ds_list_clear(other._actionList);
            instance_destroy();
        }
        else
        {
            ds_list_add(other._actionList, MineObject);
            ds_list_add(other._actionList, x);
            ds_list_add(other._actionList, y);
            ds_list_add(other._actionList, image_angle);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish Drawing Gun

if (_isDrawing &amp;&amp; _currentTool == DRAWGUN)
{
    ds_list_add(_actionList, GunObject);
    ds_list_add(_actionList, _selected.x);
    ds_list_add(_actionList, _selected.y);
    ds_list_add(_actionList, _selected.image_angle);

    for (var i = 0; i &lt; ds_list_size(_bulletList); i++)
    {
        var bullet = ds_list_find_value(_bulletList, i);
        ds_list_add(_actionList, BulletObject);
        ds_list_add(_actionList, bullet.x);
        ds_list_add(_actionList, bullet.y);
        ds_list_add(_actionList, bullet.image_angle);
    }
    
    ds_list_clear(_bulletList);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if Flag overlap anything

if (_isDrawing &amp;&amp; _currentTool == DRAWFLAG)
{
    with (_selected)
    {
        if (place_meeting(x, y, CannotDrawObject) || place_meeting(x,y,HurtfulObject))
        {
            var message = instance_create(room_width / 2, room_height / 2, PopUpMessageObject);
            message.MyText = "Cannot place Flag on top of another object";
            ds_list_clear(other._actionList);
            instance_destroy();
        }
        else
        {
            ds_list_add(other._actionList, FlagObject);
            ds_list_add(other._actionList, x);
            ds_list_add(other._actionList, y);
            ds_list_add(other._actionList, image_angle);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Drawing

_isDrawing = false;
_selected = 0;

if (ds_list_size(_actionList) &gt; 1)
{
    ds_list_add(_undoList, _actionList);
    _actionList = ds_list_create();
}

ds_list_clear(_actionList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Drawing

if (position_empty(mouse_x, mouse_y))
{
    _isDrawing = true;
    
    if (_currentTool != ERASER)
        ds_list_add(_actionList, "Create");
    else
        ds_list_add(_actionList, "Erase");
    
    // Clear Redo List
    while(ds_list_size(_redoList) &gt; 0)
    {
        var actionList = ds_list_find_value(_redoList, 0);
        ds_list_clear(actionList);
        ds_list_delete(_redoList, 0);
    }
}

_lastPointX = mouse_x;
_lastPointY = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Drawing Mine

if (_isDrawing &amp;&amp; _currentTool == DRAWMINE)
{
    _selected = instance_create(mouse_x, mouse_y, MineObject);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Drawing Gun

if (_isDrawing &amp;&amp; _currentTool == DRAWGUN)
{
    _selected = instance_create(mouse_x, mouse_y, GunObject);
    
    with (_selected)
    {
        if (place_meeting(x, y, CannotDrawObject))
        {
            var message = instance_create(0, 0, PopUpMessageObject);
            message.IsCentered = true;
            message.MyText = "Cannot place gun off paper or in river";
            other._isDrawing = false;
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Drawing Flag

if (_isDrawing &amp;&amp; _currentTool == DRAWFLAG)
{
    if (!instance_exists(FlagObject))
    {
        _selected = instance_create(mouse_x, mouse_y, FlagObject);
    }
    else
    {
        _selected = instance_find(FlagObject, 0);
        ds_list_clear(_actionList);
        ds_list_add(_actionList, "Move");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch Players and Draw Map
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll View to Target

_scrollAmount = 0;
_scrollViewToTarget = true;
_startViewX = view_xview[0];
_startViewY = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Redo Action

if (ds_list_size(_redoList) &gt; 0)
{
    // Pop the value (get the value and delete last list value)
    var actionList = ds_list_find_value(_redoList, ds_list_size(_redoList) - 1);
    ds_list_delete(_redoList, ds_list_size(_redoList) - 1);
    
    // Default Variables
    var action = "Nothing";
    var i;
    
    // Get Action
    if (ds_list_size(actionList) &gt; 0)
        action = ds_list_find_value(actionList, 0);
    
    // Do stuff with actions
    if (action == "Create")
    {
        for (i = 1; i &lt; ds_list_size(actionList); i += 4)
        {
            var objType = ds_list_find_value(actionList, i);
            var instX = ds_list_find_value(actionList, i + 1);
            var instY = ds_list_find_value(actionList, i + 2);
            var instAngle = ds_list_find_value(actionList, i + 3);

            var instance = instance_create(instX, instY, objType);
            instance.image_angle = instAngle;
            
            if (objType == GunObject &amp;&amp; 
            90 &lt; instance.image_angle &amp;&amp; instance.image_angle &lt; 270)
                instance.image_yscale = -1;
        }
    }
    else if (action == "Erase")
    {
        for (i = 1; i &lt; ds_list_size(actionList); i += 4)
        {
            var objType = ds_list_find_value(actionList, i);
            var instX = ds_list_find_value(actionList, i + 1);
            var instY = ds_list_find_value(actionList, i + 2);
            var instAngle = ds_list_find_value(actionList, i + 3);
            
            var instance = instance_nearest(instX, instY, objType);
            
            with (instance)
                instance_destroy();
        }
    }
    
    ds_list_add(_undoList, actionList);
}
// Show message if no Undos left
else
{
    var message = instance_create(view_wview[0] / 2 + view_xview[0], view_hview[0] / 2 + view_yview[0], PopUpMessageObject);
    message.MyText = "There are no more actions to Redo";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Undo Action

if (ds_list_size(_undoList) &gt; 0)
{
    // Pop the value (get the value and delete last list value)
    var actionList = ds_list_find_value(_undoList, ds_list_size(_undoList) - 1);
    ds_list_delete(_undoList, ds_list_size(_undoList) - 1);
    
    // Default Variables
    var action = "Nothing";
    var i;
    
    // Get Action
    if (ds_list_size(actionList) &gt; 0)
        action = ds_list_find_value(actionList, 0);
    
    // Do stuff with actions
    if (action == "Create")
    {
        for (i = 1; i &lt; ds_list_size(actionList); i += 4)
        {
            var objType = ds_list_find_value(actionList, i);
            var instX = ds_list_find_value(actionList, i + 1);
            var instY = ds_list_find_value(actionList, i + 2);
            var instAngle = ds_list_find_value(actionList, i + 3);
            
            var instance = instance_nearest(instX, instY, objType);
            
            with (instance)
                instance_destroy();
        }
    }
    else if (action == "Erase")
    {
        for (i = 1; i &lt; ds_list_size(actionList); i += 4)
        {
            var objType = ds_list_find_value(actionList, i);
            var instX = ds_list_find_value(actionList, i + 1);
            var instY = ds_list_find_value(actionList, i + 2);
            var instAngle = ds_list_find_value(actionList, i + 3);

            var instance = instance_create(instX, instY, objType);
            instance.image_angle = instAngle;
            
            if (objType == GunObject &amp;&amp; 
            90 &lt; instance.image_angle &amp;&amp; instance.image_angle &lt; 270)
                instance.image_yscale = -1;
        }
    }
    
    ds_list_add(_redoList, actionList);
}
// Show message if no Undos left
else
{
    var message = instance_create(view_wview[0] / 2 + view_xview[0], view_hview[0] / 2 + view_yview[0], PopUpMessageObject);
    message.MyText = "There are no more actions to Undo";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Number of Instances: " + string(instance_number(all)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Mouse coordinates

show_debug_message("Mouse: " + string(mouse_x) + ", " + string(mouse_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>CursorSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate Cursor

image_xscale = 0.6;
image_yscale = 0.6;
image_angle = 90;

_isDrawing = false;
_points = ds_list_create();
_offsetX = 0;
_offsetY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>CursorObject</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add points

if (_isDrawing)
{
    var point = ds_list_find_value(_points, ds_list_size(_points)-1);
    x = mouse_x + _offsetX;
    y = mouse_y + _offsetY;
    
    if (collision_line(x, y, point[0], point[1], FinishRegion, true, true))
    {
        var message = instance_create(room_width/2, room_height/2, PopUpMessageObject);
        message.MyText = "You finshed! Saving Map...";
        _isDrawing = false;
        instance_create(x, y, MarkDotObject);

        with (FinishButtonObject)
            event_perform(ev_other, ev_user0);
    }
    else if (collision_line(x, y, point[0], point[1], BridgeObject, true, true))
    {
    }
    else if (collision_line(x, y, point[0], point[1], HurtfulObject, true, true))
    {
        var distance = point_distance(x, y, point[0], point[1]);
        var pointDirection = point_direction(point[0], point[1], x, y);

        var checkResolution = 1; // How fine should the line check
        for (var i = 1; i &lt; distance; i = i + checkResolution)
        {
            var newX = point[0] + lengthdir_x(i, pointDirection);
            var newY = point[1] + lengthdir_y(i, pointDirection);
            if (collision_line(newX, newY, point[0], point[1], HurtfulObject, true, true))
            {
                x = newX;
                y = newY;
                break;
            }
        }
        
        var message = instance_create(room_width/2, room_height/2, PopUpMessageObject);
        message.MyText = "BOOM! Try again!";
        _isDrawing = false;
        instance_create(x, y, MarkDotObject);
        
        with (FinishButtonObject)
            event_perform(ev_other, ev_user0);
        with (FinishButton)
            event_perform(ev_other, ev_user0);
    }
    
    if (x != point[0] &amp;&amp; y != point[1])
    {
        var pathLine = instance_create(0, 0, PathLineObject);
        pathLine.X1 = point[0];
        pathLine.Y1 = point[1];
        pathLine.X2 = x;
        pathLine.Y2 = y;
        
        point = 0;
        point[0] = x;
        point[1] = y;
        ds_list_add(_points, point);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Drawing

_isDrawing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start drawing

_isDrawing = true;

_offsetX = x - mouse_x;
_offsetY = y - mouse_y;

if (ds_list_size(_points) == 0)
{
    var point = 0;
    point[0] = x;
    point[1] = y;
    ds_list_add(_points, point);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Line and Cursor

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>47,2</point>
    <point>70,70</point>
  </PhysicsShapePoints>
</object>
